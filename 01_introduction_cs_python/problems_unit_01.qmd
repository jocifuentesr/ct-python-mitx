# Problemas primera unidad
## Problema 01 
Suponga que s es una cadena de caracteres en minúsculas.

Escriba un programa que cuente el número de vocales contenidas en la cadena s. Las vocales válidas son: 'a', 'e', 'i', 'o' y 'u'. Por ejemplo, si s = 'azcbobobegghakl', su programa debe imprimir:

Número de vocales: 5

```{python}
s = 'azcbobobegghakl'
num_vowels = 0
for char in s:
    if char in 'aeiou':
        num_vowels += 1

print(f"Number of vowels: {num_vowels}")
```

## Problema 2
Suponga que s es una cadena de caracteres en minúsculas.

Escriba un programa que imprima el número de veces que la cadena 'bob' aparece en s. Por ejemplo, si s = 'azcbobobegghakl', entonces su programa debe imprimir:

El número de veces que aparece bob es: 2

```{python}
s = 'azcbobobegghakl'
counter = 0
for i in range(len(s) - 2):
    if s[i:i+3] == 'bob':
        counter += 1
print(f"Number of times bob occurs is: {counter}")
```

## Problema 3

Suponga que s es una cadena de caracteres en minúsculas.

Escriba un programa que imprima la subcadena más larga de s en la que las letras aparezcan en orden alfabético. Por ejemplo, si s = 'azcbobobegghakl', entonces su programa debe imprimir

*La subcadena más larga en orden alfabético es: beggh*

En caso de empates, imprima la primera subcadena. Por ejemplo, si s = 'abcbcd', entonces su programa debe imprimir

*La subcadena más larga en orden alfabético es: abc*


```{python}
s = 'abcbcd'

longest = s[0]
current = s[0]

for i in range(1, len(s)):
    if s[i] >= current[-1]:
        current += s[i]
        if len(current) > len(longest):
            longest = current
    else:
        current = s[i]
longest

```